var COMMAND_REPORT = 0x00; //属性上报
var COMMAND_SET = 0x01; //属性设置
var COMMAND_REPORT_REPLY = 0x02; //上报数据返回结果
var COMMAND_SET_REPLY = 0x03; //属性设置设备返回结果
var COMMAD_UNKOWN = 0xff;    //未知的命令
var ALINK_PROP_REPORT_METHOD = "thing.event.property.post"; //物联网平台Topic， 设备上传属性数据到云端
var ALINK_PROP_SET_METHOD = "thing.service.property.set"; //物联网平台Topic， 云端下发属性控制指令到设备端
var ALINK_PROP_SET_REPLY_METHOD = "thing.service.property.set"; //物联网平台Topic, 设备上报属性设置的结果到云端
/*
示例数据：
设备上报数据
传入参数 ->
    0x000000000100320100000000
输出结果 ->
    {"method":"thing.event.property.post","id":"1","params":{"prop_float":0,"prop_int16":50,"prop_bool":1},"version":"1.0"}

属性设置的返回结果
传入参数 ->
    0x0300223344c8
输出结果 ->
    {"code":"200","data":{},"id":"2241348","version":"1.0"}
*/
function rawDataToProtocol(bytes) {
    var uint8Array = new Uint8Array(bytes.length);
    for (var i = 0; i < bytes.length; i++) {
        uint8Array[i] = bytes[i] & 0xff;
    }
    //视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。
    var dataView = new DataView(uint8Array.buffer, 0);
    var jsonMap = new Object();
    var fHead = uint8Array[0]; // command
    if (fHead == COMMAND_REPORT) {
    	if (uint8Array[15] == 15){ //获取状态
    		//0000201909040003020f0c500010028d12d3dd,1\3\4\8\10\13打开
    		var tempa = ("00000000"+uint8Array(17).toString(2)).slice(-8,)+("00000000"+uint8Array(16).toString(2)).slice(-8,)
    		var devstate= tempa.split('').reverse().join('')
	        jsonMap["method"] = ALINK_PROP_REPORT_METHOD; //ALink JSON格式 - 属性上报topic
	        jsonMap["version"] = "1.1"; //ALink JSON格式 - 协议版本号固定字段
	        jsonMap["id"] = "" + dataView.getInt32(1); //ALink JSON格式 - 标示该次请求id值
	        var params = {};
	        params["area1"] = parseInt(devstate.slice(0)); //对应产品属性中area1
	        params["area2"] = parseInt(devstate.slice(1)); //对应产品属性中area2       
	        params["area3"] = parseInt(devstate.slice(2)); //对应产品属性中area3
	        params["area4"] = parseInt(devstate.slice(3)); //对应产品属性中area4
	        params["area5"] = parseInt(devstate.slice(4)); //对应产品属性中area5
	        params["area6"] = parseInt(devstate.slice(5)); //对应产品属性中area6
	        params["area7"] = parseInt(devstate.slice(6)); //对应产品属性中area7
	        params["area8"] = parseInt(devstate.slice(7)); //对应产品属性中area8
	        params["area9"] = parseInt(devstate.slice(8)); //对应产品属性中area9
	        params["area10"] = parseInt(devstate.slice(9)); //对应产品属性中area10       
	        params["area11"] = parseInt(devstate.slice(10)); //对应产品属性中area11
	        params["area12"] = parseInt(devstate.slice(11)); //对应产品属性中area12
	        params["fertbump"] = parseInt(devstate.slice(12)); //对应产品属性中fertbump
	        params["fertvalve"] = parseInt(devstate.slice(13)); //对应产品属性中fertvalve
	        params["cleanvalve"] = parseInt(devstate.slice(14)); //对应产品属性中cleanvalve
	        params["alarmer"] = parseInt(devstate.slice(15)); //对应产品属性中alarmer
	        jsonMap["params"] = params; //ALink JSON格式 - params标准字段
	        }
	    else if (uint8Array[15] == 16){ //任务上传
    		//0000201909040003021000000020400000043200020000000500000000000000000000000000000000000000000000000007e3000a001d0015001e000b07e3000a001d0015001e00100000000500004b54
    		//2019-10-29 21:30:11 21:30:16 灌溉 2/5/6/11灌区，计划时长5，实际时长5，状态：已完成
    		var remote_attr = dataView.getInt16(16)
    		var tempa = ("00000000"+uint8Array(18).toString(2)).slice(-8,)+("00000000"+uint8Array(19).toString(2)).slice(-8,)
    		var devstate= tempa.split('').reverse().join('')
	        jsonMap["method"] = ALINK_PROP_REPORT_METHOD; //ALink JSON格式 - 属性上报topic
	        jsonMap["version"] = "1.1"; //ALink JSON格式 - 协议版本号固定字段
	        jsonMap["id"] = "" + dataView.getInt32(1); //ALink JSON格式 - 标示该次请求id值
	        var params = {};
	        params["area1"] = parseInt(devstate.slice(0)); //对应产品属性中area1
	        params["area2"] = parseInt(devstate.slice(1)); //对应产品属性中area2       
	        params["area3"] = parseInt(devstate.slice(2)); //对应产品属性中area3
	        params["area4"] = parseInt(devstate.slice(3)); //对应产品属性中area4
	        params["area5"] = parseInt(devstate.slice(4)); //对应产品属性中area5
	        params["area6"] = parseInt(devstate.slice(5)); //对应产品属性中area6
	        params["area7"] = parseInt(devstate.slice(6)); //对应产品属性中area7
	        params["area8"] = parseInt(devstate.slice(7)); //对应产品属性中area8
	        params["area9"] = parseInt(devstate.slice(8)); //对应产品属性中area9
	        params["area10"] = parseInt(devstate.slice(9)); //对应产品属性中area10       
	        params["area11"] = parseInt(devstate.slice(10)); //对应产品属性中area11
	        params["area12"] = parseInt(devstate.slice(11)); //对应产品属性中area12
	        params["fertbump"] = parseInt(devstate.slice(12)); //对应产品属性中fertbump
	        params["fertvalve"] = parseInt(devstate.slice(13)); //对应产品属性中fertvalve
	        params["cleanvalve"] = parseInt(devstate.slice(14)); //对应产品属性中cleanvalve
	        params["alarmer"] = parseInt(devstate.slice(15)); //对应产品属性中alarmer
	        
	        params["task_state"] = dataView.getInt16(20)
	        params["schedule_irrigate_num"] = dataView.getInt16(22)
	        params["schedule_irrigate_interval"] = dataView.getInt16(24)
	        params["schedule_fertilize_num"] = dataView.getInt16(26)
	        params["start_year"] = String(dataView.getInt16(50)) 
	        params["start_month"] = String(dataView.getInt16(52)) 
	        params["start_day"] = String(dataView.getInt16(54))
	        params["start_hour"] = String(dataView.getInt16(56)) 
	        params["start_minute"] = String(dataView.getInt16(58)) 
	        params["start_second"] = String(dataView.getInt16(60))
			params["end_year"] = String(dataView.getInt16(62)) 
	        params["end_month"] = String(dataView.getInt16(64)) 
	        params["end_day"] = String(dataView.getInt16(66))
	        params["end_hour"] = String(dataView.getInt16(68)) 
	        params["end_minute"] = String(dataView.getInt16(70)) 
	        params["end_second"] = String(dataView.getInt16(72))	        
	        
	        
	        params["waterreal"] = dataView.getInt16(74)
	        params["intervalreal"] = dataView.getInt16(76)
	        params["fertreal"] = dataView.getInt16(78)
	        
	        jsonMap["params"] = params; //ALink JSON格式 - params标准字段
	        }
	        
	        
	        
    } else if(fHead == COMMAND_SET_REPLY) {
        jsonMap['version'] = '1.0'; //ALink JSON格式 - 协议版本号固定字段
        jsonMap['id'] = '' + dataView.getInt32(1); //ALink JSON格式 - 标示该次请求id值
        jsonMap['code'] = ''+ dataView.getUint8(5);
        jsonMap['data'] = {};
    }

    return jsonMap;
}
/*
示例数据：
属性设置
传入参数 ->
    {"method":"thing.service.property.set","id":"12345","version":"1.0","params":{"prop_float":123.452, "prop_int16":333, "prop_bool":1}}
输出结果 ->
    0x0100003039014d0142f6e76d

设备上报的返回结果
传入数据 ->
    {"method":"thing.event.property.post","id":"12345","version":"1.0","code":200,"data":{}}
输出结果 ->
    0x0200003039c8
*/
function protocolToRawData(json) {
    var method = json['method'];
    var id = json['id'];
    var version = json['version'];
    var payloadArray = [];
    if (method == ALINK_PROP_SET_METHOD) // 属性设置
    {
        var params = json['params'];
        var prop_float = params['prop_float'];
        var prop_int16 = params['prop_int16'];
        var prop_bool = params['prop_bool'];
        //按照自定义协议格式拼接 rawData
        payloadArray = payloadArray.concat(buffer_uint8(COMMAND_SET)); // command字段
        payloadArray = payloadArray.concat(buffer_int32(parseInt(id))); // ALink JSON格式 'id'
        payloadArray = payloadArray.concat(buffer_int16(prop_int16)); // 属性'prop_int16'的值
        payloadArray = payloadArray.concat(buffer_uint8(prop_bool)); // 属性'prop_bool'的值
        payloadArray = payloadArray.concat(buffer_float32(prop_float)); // 属性'prop_float'的值
    } else if (method ==  ALINK_PROP_REPORT_METHOD) { //设备上报数据返回结果
        var code = json['code'];
        payloadArray = payloadArray.concat(buffer_uint8(COMMAND_REPORT_REPLY)); //command字段
        payloadArray = payloadArray.concat(buffer_int32(parseInt(id))); // ALink JSON格式 'id'
        payloadArray = payloadArray.concat(buffer_uint8(code));
    } else { //未知命令，对于有些命令不做处理
        var code = json['code'];
        payloadArray = payloadArray.concat(buffer_uint8(COMMAD_UNKOWN)); //command字段
        payloadArray = payloadArray.concat(buffer_int32(parseInt(id))); // ALink JSON格式 'id'
        payloadArray = payloadArray.concat(buffer_uint8(code));
    }
    return payloadArray;
}
//以下是部分辅助函数
function buffer_uint8(value) {
    var uint8Array = new Uint8Array(1);
    var dv = new DataView(uint8Array.buffer, 0);
    dv.setUint8(0, value);
    return [].slice.call(uint8Array);
}
function buffer_int16(value) {
    var uint8Array = new Uint8Array(2);
    var dv = new DataView(uint8Array.buffer, 0);
    dv.setInt16(0, value);
    return [].slice.call(uint8Array);
}
function buffer_int32(value) {
    var uint8Array = new Uint8Array(4);
    var dv = new DataView(uint8Array.buffer, 0);
    dv.setInt32(0, value);
    return [].slice.call(uint8Array);
}
function buffer_float32(value) {
    var uint8Array = new Uint8Array(4);
    var dv = new DataView(uint8Array.buffer, 0);
    dv.setFloat32(0, value);
    return [].slice.call(uint8Array);
}

function buffer_byte(value) {
    var uint8Array = new Uint8Array(4);
    var dv = new DataView(uint8Array.buffer, 0);
    dv.setFloat32(0, value);
    return [].slice.call(uint8Array);
}